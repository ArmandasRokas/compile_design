// Example: Expressions Interpreter

DATA AST    WITH {import java.util.HashMap;
import java.util.Map.Entry;
import java.util.List;
import java.util.ArrayList;

class faux{ // collection of non-OO auxiliary functions (currently just error)
    public static void error(String msg){
	System.err.println("Interpreter error: "+msg);
	System.exit(-1);
    }
}

abstract class AST{
}}
= AST(int i)     {code}
;

DATA Start                               WITH {String translate()}
= Start(List<DataTypeDef> datatypedefs)     {
        String s = "";
        for (DataTypeDef dataTypeDef : datatypedefs) {
            s += dataTypeDef.translate();
        }
        return ""+
            s;
    }
;

DATA DataTypeDef           WITH {String translate()}
= DataTypeDef(String dataTypeName, String functionHead, List<Alternative> alternatives)    {
        if (alternatives.size() == 1 && dataTypeName == alternatives.get(0).constructor) 
            return alternatives.get(0).translate("AST", functionHead);
        String s = "";
        for (Alternative alternative : alternatives) {
            s += alternative.translate(dataTypeName, functionHead);
        }
        return "\n\n" +
            "public abstract class " + dataTypeName + " extends AST{\n"+
            "    abstract" + functionHead +";\n"+
            "}" +
            s;
	// You may start here by replacing this with something else
    }
;

DATA Alternative           WITH {String translate(String ancestor, String functionHead)}
= Alternative(String constructor, List<Argument> arguments,  String code)    {
        String args = "";
        String members = "";
        String conscode = "";
        for (Argument argument : arguments) {
            if (args.length() > 0) args += ", ";
            args +=  argument.type + " " + argument.name;
            members  += "    public " + argument.type + " " + argument.name + ";\n";
            conscode += "        this." + argument.name + "=" + argument.name + ";\n";
        }
        return "\n\n" +
            "class " + constructor + " extends "+ ancestor + "{\n"+
            members +
            "    " + constructor +"(" + args + "){\n"+
            conscode +
            "    }\n"+
            "    public " + functionHead +
            code +"\n"+
            "}";
    }
;

DATA Argument                            WITH {String translate()}
= Argument(String type, String name)     {
        return "argument ";
    }
;
