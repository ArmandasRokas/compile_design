// Task 3. Coco for fun interpreter


DATA FunAbstract            WITH { Value eval(Environment env, FunEnvironment fenv) }
= Fun(TypeID typeid, List<TypeID> parameters, Expr e) { faux.error("Fun.eval should not be called!"); return null;} ;

DATA ValueAbstract          WITH { String toString() } 
= Value(Type valuetype, int value) { 	if (valuetype==Type.BOOLTYPE){
	                                    if (value==0) return "False";
	                                            return "True";
	                                    }       
	                                    return ""+value; } ; 

DATA TypeIDAbstract WITH {Value eval(Environment env, FunEnvironment fenv)} 
= TypeID(Type valuetype, String ident) { 
                                    	faux.error("TypeID.eval should not be called!");
	                            return null;
                                    };

DATA StartAbstract WITH { Value eval(Environment env, FunEnvironment fenv) } 
= Start(List<Fun> funs, Expr e) {	for(Fun f: funs){
	                        fenv.setFunction(f.typeid.ident,f);
	                            }           
	                            return e.eval(env,fenv);};

DATA Expr WITH {Value eval(Environment env, FunEnvironment fenv)} 
= Constant(Value v)  {return v;}
| Variable(String varname)  {return env.getVariable(varname);}
| Addition(Expr e1, Expr e2) {Value v1=e1.eval(env,fenv);
	Value v2=e2.eval(env,fenv);
	if (v1.valuetype!=Type.INTTYPE || v2.valuetype!=Type.INTTYPE)
	    faux.error("Type mistake.\n");
	return new Value(Type.INTTYPE,v1.value+v2.value);}
| Multiplication(Expr e1, Expr e2) {Value v1=e1.eval(env,fenv);
	Value v2=e2.eval(env,fenv);
	if (v1.valuetype!=Type.INTTYPE || v2.valuetype!=Type.INTTYPE)
	    faux.error("Type mistake.\n");
	return new Value(Type.INTTYPE,v1.value*v2.value);}
| Comparison(Expr e1, Expr e2) { 	Value v1=e1.eval(env,fenv);
	Value v2=e2.eval(env,fenv);
	if (v1.valuetype!=v2.valuetype)
	    faux.error("Type mistake.\n");
	if (v1.value==v2.value)
	    return new Value(Type.BOOLTYPE,1);
	else
	    return new Value(Type.BOOLTYPE,0);
    }
| Conditional(Expr cond, Expr e1, Expr e2){
    Value c=cond.eval(env,fenv);
	if (c.valuetype!=Type.BOOLTYPE)
	    faux.error("Condition is not a bool!\n");
	if (c.value==1)
	    return e1.eval(env,fenv);
	else
	    return e2.eval(env,fenv);
}
| FunctionCall (String fname, List<Expr> parameters) {
Fun fundef=fenv.getFunction(fname);
	if (parameters.size()!=fundef.parameters.size()){
	    faux.error("Wrong number of parameters\n");
	}
	Environment newenv=new Environment();
	for(int i=0; i<parameters.size(); i++){
	    Value v=parameters.get(i).eval(env,fenv);
	    if (v.valuetype!= fundef.parameters.get(i).valuetype)
		faux.error("Wrong type in argument\n");
	    newenv.setVariable( fundef.parameters.get(i).ident , v);
	}
	return fundef.e.eval(newenv,fenv);
}
;
